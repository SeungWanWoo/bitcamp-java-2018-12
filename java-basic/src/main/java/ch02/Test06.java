// 부동소수점을 메모리에 저장하는 원리
package ch02;

public class Test06 {
  static final float f = 12.375f; 
  public static void main(String[] args) {
    System.out.println(0.1f * 0.1f); //예상값(0.01)과 다르다
    // 이유?
    // =>부동소수점을 이진수로 바꿀 때 아~~주 작은 수의 오차가 있을 수 있다.
    //
    // 그래서 부동소수점을 비교할 때 정수 비교할 때 처럼 단순하게 비교하면
    // 원하는 결과를 얻을 수 없다.
    // 다음의 결과를 보라
    System.out.println(0.1f * 0.1f == 0.01f); //true를 예상 그러나 false
    
    //해결방안
    // => 예상한 값과의 오차가 부동소수점에서 인정하는 오차 이하의 값이라면 같은 것으로 취급한다
    System.out.println((0.1f * 0.1f - 0.01f) <= Float.POSITIVE_INFINITY);
    // Float.POSITIVE_INFINITY = 0.0000000 ..... 1;
    // 부동소수점은 절대 정수값처럼 비교하면 안된다.
  }
}

/*
 * # 정수를 메모리에 저장하는 방법
 *  - 전기적 신호로 저장한다. => 각 비트의 전기의 유무 상태에 따라 값을 읽고 쓴다.
 *  - 이론이나 프로그램 코드에서는 비트에 전기가 있는 상태를 1로 표현하고 없는 상태를 0으로 표현한다.
 *  - 즉, 값을 저장하려면 0과 1로 표현이 가능해야 한다.
 *  - 2진수로 표현할 수 있어야 한다.
 */
